<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
​		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<default-servlet-handler/>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
		
	<!-- 빈으로 등록 될 준비를 마친(우리가 @Controller, @Service, @Component, @Repository 어노테이션을 붙인
		클래스들) 클래스들을 스캔하여, 빈으로 등록해주는 것이다. -->
  	<context:component-scan base-package="com.jaego.web" />
  	
  	<!-- 파일 업로드 -->
  	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="209715200"/>
		<beans:property name="defaultEncoding" value="UTF-8"/>
		<beans:property name="maxInMemorySize" value="1000000"/>
   	</beans:bean> 
	
   	
   	 <!--  <view-controller path="/main/main" view-name="main/main"/>  -->
  <!--  별도의 모델이나 컨트롤러가 없이 URL요청이 왔을때 뷰로 연결만 해주는 경우는 굳이 컨트롤러가 필요없이
  <mvc:view-controller>태그를 사용하면 URL과  뷰를 매핑해 줄 수 있습니다./WEB-INF/views/main.jsp -->
    
    <!-- jsp <spring:message>사용 -->
    <!--  
   <beans:bean id ="messageSource"
	  class = "org.springframework.context.support.ResourceBundleMessageSource">
	  <beans:property name="basenames">
	  		<beans:list>
	  			<beans:value>message.label</beans:value>
	  		</beans:list>
	  </beans:property>		  
	</beans:bean> 
    -->
    
   	
<!--    	인터셉터 설정
   	<interceptors>
   		<interceptor>
   			<mapping path="/profile/**"/>
   			<beans:bean class="interceptor.UserCheckInterceptor"/>
   		</interceptor>
   		 <interceptor>
   			<mapping path="/user/changePw"/>
   			<beans:bean class="interceptor.UserCheckInterceptor"/>
   		</interceptor>
   		 <interceptor>
   			<mapping path="/deview/**"/>
   			<beans:bean class="interceptor.UserCheckInterceptor"/>
   		</interceptor>
   	</interceptors> -->
   	
   	
   	
   	
   	
   	
   	   <!-- DB 관련 -->    
   	   
   	   
	   	   	<!-- @Transactional 어노테이션이 붙은 메서드를 트랜잭션 범위에서 실행하는 기능을 활성화 한다.  -->
	<!--    <tx:annotation-driven transaction-manager="transactionManager"/>	
		<beans:bean id="transactionManager"
	   	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	   		<beans:property name="dataSource" ref="dataSource"/>
	   	</beans:bean> -->
   	
	 <beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	   		<beans:property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>  			<!-- jdbc 드라이버 클래스 -->
	   		<beans:property name="jdbcUrl" value="jdbc:mysql://localhost:3306/testdb"/>  	<!-- DB 접속 경로 -->
	   		<beans:property name="user" value="tester"/>  									<!-- DB접속 계정-->
	   		<beans:property name="password" value="1234"/> 									<!--DB접속 계정 비밀번호-->
	   		<beans:property name="maxPoolSize" value="100"/> 								<!--커넥션 풀 최대크기-->
	   		<beans:property name="maxIdleTime" value="600"/>								<!-- 사용되지 않는 커넥션 해체 시간-->
	   		<beans:property name="idleConnectionTestPeriod" value="300"/> 					<!--커넥션 풀의 커넥션 테스트 주기 (디폴트 : 0)-->
	   </beans:bean>
  
     	   	<!-- DB와 연결하는 DataSource를 구현한 객체를 생성자로 받아 DB연결 세션을 생성하고 관리하는 클래스 -->
 	  	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   		<beans:property name="dataSource" ref="dataSource"/>
   		<beans:property name="configLocation" value="classpath:config/mybatis-config.xml"/>
   		<beans:property name="mapperLocations">
   			<beans:list>
   				<beans:value>classpath:config/lecture.xml</beans:value>
   				<beans:value>classpath:config/member.xml</beans:value>
   				<beans:value>classpath:config/mentor.xml</beans:value>
   				<beans:value>classpath:config/orders.xml</beans:value>
   				<beans:value>classpath:config/lectureroom.xml</beans:value>
   				<beans:value>classpath:config/reply.xml</beans:value>
   				<beans:value>classpath:config/review.xml</beans:value>
   			</beans:list>
   		</beans:property> 
   	</beans:bean>
   	
   	<!-- DAO에서 호출하는 SQL메소드와 연동하여 예외,세션 종료,커밋,롤백 등의 SQL작업을 관리한다.-->
   	<beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
   		destroy-method="clearCache">
   		<beans:constructor-arg ref="sqlSessionFactory" />	
   	</beans:bean> 
   	
<!--    	<beans:bean id ="lectureDao" class="com.jaego.web.repository.LectureDaoRepo">
   		<beans:constructor-arg ref="sqlSessionTemplate"/>
   	</beans:bean> 
   	
   	<beans:bean id ="memberDao" class="com.jaego.web.repository.MemberDaoRepo">
   		<beans:constructor-arg ref="sqlSessionTemplate"/>
   	</beans:bean> 
   	
   	<beans:bean id ="mentorDao" class="com.jaego.web.repository.MentorDaoRepo">
   		<beans:constructor-arg ref="sqlSessionTemplate"/>
   	</beans:bean> 

   	 -->
   	
</beans:beans>